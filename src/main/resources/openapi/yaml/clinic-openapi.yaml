---
openapi: 3.0.0
info:
  title: API BUSINESS CLINIC
  description: API desarrollada para una Clinica
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/EduCC0r/APICLINIC/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: /http://localhost:8080/
    description: SwaggerHub API Auto Mocking
tags:
  - name: user
    description: Todo sobre los Usuarios del Sistemma
  - name: role
    description: Todo sobre los Roles del Usuario del Sistema
  - name: token
    description: Todas las operaciones con el Token del Sistema
paths:
  /user:
    get:
      tags:
        - user
      summary: List all users
      description: Return list Users
      operationId: listUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - user
      summary: Create a user
      description: Add a new User
      operationId: registerUser
      requestBody:
        description: Create a new user in the SGIEM
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /user/{username}:
    get:
      tags:
        - user
      summary: Find by user for Username
      description: Return user for Username of database
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: username register of database
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: username register of database
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Update an existent password the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /user/assign/{rol}/{username}:
    put:
      tags:
        - user
      summary: Assign user added rol
      description: This can only be done by the logged in user.
      operationId: assignUser
      parameters:
        - name: rol
          in: path
          description: rol that need to be added
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - ADMIN
              - USER
              - MEDIC
        - name: username
          in: path
          description: username of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /user/password/{email}:
    put:
      tags:
        - user
      summary: Reset password to User
      description: This can only be done by the logged in user.
      operationId: resetPassword
      parameters:
        - name: email
          in: path
          description: email user
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Update an existent password the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PasswordResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /role:
    get:
      tags:
        - role
      summary: List all rols
      description: Return list Rols
      operationId: listRoles
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolDetails'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - role
      summary: Crear rol necesarios
      description: Add new Rol
      operationId: registerRole
      requestBody:
        description: Body Rol Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/RolRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RolRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/RolDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /token:
    post:
      tags:
        - token
      summary: Obtienes el Token del usuario
      description: Get Token
      operationId: getToken
      requestBody:
        description: Generate Token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/TokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    UserRequest:
      type: object
      properties:
        names:
          type: string
          example: Edward Andres
        lastNames:
          type: string
          example: Cordova Chavez
        username:
          type: string
          example: eduCC0r
        password:
          type: string
          example: '*****'
        email:
          type: string
          example: edd.ckalb@gmail.com
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        names:
          type: string
          example: Edward Andres
        lastNames:
          type: string
          example: Cordova Chavez
        username:
          type: string
          example: eduCC0r
        email:
          type: string
          example: edd.ckalb@gmail.com
        code:
          type: string
          example: ABCD1234
        status:
          type: string
          example: "true"
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RolDetails'
    UserUpdateRequest:
      type: object
      properties:
        names:
          type: string
          example: Edward Andres
        lastNames:
          type: string
          example: Cordova Chavez
        email:
          type: string
          example: edd.ckalb@gmail.com
        password:
          type: string
          example: '*****'
    RolDetails:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: ADMIN
          enum:
            - ADMIN
            - USER
            - MEDIC
    PasswordRequest:
      type: object
      properties:
        password:
          type: string
          example: '*****'
    PasswordResponse:
      type: object
      properties:
        validate:
          type: string
          example: "true"
    RolRequest:
      type: object
      properties:
        name:
          type: string
          example: ADMIN
          enum:
            - ADMIN
            - USER
            - MEDIC
    TokenRequest:
      type: object
      properties:
        username:
          type: string
          example: james@gmail.com
        password:
          type: string
          example: "12345"
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: $2abfFDfdf
        type:
          type: string
          example: access_token
        username:
          type: string
          example: educc0r
        authenticated:
          type: string
          example: "true"
        expiration:
          type: string
          example: Wed Aug 02 02:09:44 PET 2023
    ApiError:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ApiError_error'
    ApiError_error:
      type: object
      properties:
        code:
          type: string
          example: "401"
        message:
          type: string
          example: 401 UNAUTHORIZED \"Not Authorized\"
        status:
          type: string
          example: Unauthorized
        timestamp:
          type: string
          example: Thu Aug 03 01:54:34 PET 2023
        path:
          type: string
          example: /tokenn
        requestId:
          type: string
          example: 56ff36d6-1